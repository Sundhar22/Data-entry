// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Commissioner {
  id              String   @id @default(cuid())
  name            String
  location        String
  phone           String
  email           String   @unique
  password        String
  commission_rate Float    @default(5.0)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  farmers          Farmer[]
  buyers           Buyer[]
  auction_sessions AuctionSession[]
  password_resets  PasswordReset[]
  bills            Bill[]

  @@map("commissioners")
}

model PasswordReset {
  id              String    @id @default(cuid())
  commissioner_id String
  token           String    @unique
  expires_at      DateTime
  used            Boolean   @default(false)
  created_at      DateTime  @default(now())
  used_at         DateTime?

  commissioner Commissioner @relation(fields: [commissioner_id], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Farmer {
  id              String   @id @default(cuid())
  name            String
  phone           String
  village         String
  commissioner_id String
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  commissioner  Commissioner  @relation(fields: [commissioner_id], references: [id], onDelete: Cascade)
  auction_items AuctionItem[]
  bills         Bill[]

  @@map("farmers")
}

model Buyer {
  id              String   @id @default(cuid())
  name            String
  phone           String
  commissioner_id String
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  commissioner  Commissioner  @relation(fields: [commissioner_id], references: [id], onDelete: Cascade)
  auction_items AuctionItem[]

  @@map("buyers")
}

model Category {
  id         String   @id @default(cuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String   @unique
  category_id String
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  category      Category      @relation(fields: [category_id], references: [id])
  auction_items AuctionItem[]
  bills         Bill[]

  @@map("products")
}

model AuctionSession {
  id              String               @id @default(cuid())
  date            DateTime             @default(now())
  commissioner_id String
  status          SessionStatus        @default(ACTIVE)
  payment_status  SessionPaymentStatus @default(PENDING)
  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt

  commissioner  Commissioner  @relation(fields: [commissioner_id], references: [id], onDelete: Cascade)
  auction_items AuctionItem[]

  @@index([payment_status, date])
  @@map("auction_sessions")
}

// AUCTION_ITEMS = Pure transaction data (no payment info)
model AuctionItem {
  id          String   @id @default(cuid())
  session_id  String
  farmer_id   String
  product_id  String
  unit        Unit
  quantity    Float
  rate        Float?   // Optional for partial creation
  buyer_id    String?  // Optional for partial creation
  bill_id     String? // Link to bill when paid
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  session AuctionSession @relation(fields: [session_id], references: [id], onDelete: Cascade)
  farmer  Farmer         @relation(fields: [farmer_id], references: [id])
  product Product        @relation(fields: [product_id], references: [id])
  buyer   Buyer?         @relation(fields: [buyer_id], references: [id])
  bill    Bill?          @relation(fields: [bill_id], references: [id])

  // Indexes for finding unpaid items
  @@index([farmer_id, product_id, bill_id]) // bill_id = null means unpaid
  @@index([session_id, farmer_id, product_id]) // Group by session+farmer+product
  @@map("auction_items")
}

// BILLS = Payment records for analysis
model Bill {
  id              String @id @default(cuid())
  bill_number     String @unique
  farmer_id       String
  commissioner_id String
  product_id      String
  session_id      String // Which session this bill is for

  // Aggregated totals from auction items
  total_quantity    Float // Sum of all quantities in this bill
  gross_amount      Float // Sum of all rates (rate * quantity)
  commission_rate   Float @default(5.0)
  commission_amount Float // gross_amount * commission_rate / 100
  other_charges     Float @default(0)
  net_payable       Float // gross_amount - commission_amount - other_charges

  // Payment details
  payment_method String? // Cash, UPI, etc.
  payment_date   DateTime @default(now())
  notes          String?
  created_at     DateTime @default(now())

  // Relations
  farmer        Farmer        @relation(fields: [farmer_id], references: [id])
  commissioner  Commissioner  @relation(fields: [commissioner_id], references: [id])
  product       Product       @relation(fields: [product_id], references: [id])
  auction_items AuctionItem[] // All items paid in this bill

  // One bill per farmer per product per session
  @@unique([farmer_id, product_id, session_id])
  // Analysis indexes
  @@index([commissioner_id, payment_date]) // Commissioner daily reports
  @@index([product_id, payment_date]) // Product-wise analysis
  @@index([farmer_id, payment_date]) // Farmer payment history
  @@index([session_id]) // Session-wise bills
  @@map("bills")
}

enum SessionStatus {
  ACTIVE
  COMPLETED
}

enum SessionPaymentStatus {
  PENDING
  COMPLETED
}

enum Unit {
  KG
  GRAM
  QUINTAL
  TON
  BUNDLE
  PIECE
  LITRE
  MILLILITRE
  GALLON
  DOZEN
  BOX
  BAG
  OTHER
}


