
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CommissionerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  location: 'location',
  phone: 'phone',
  email: 'email',
  password: 'password',
  commission_rate: 'commission_rate',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  commissioner_id: 'commissioner_id',
  token: 'token',
  expires_at: 'expires_at',
  used: 'used',
  created_at: 'created_at',
  used_at: 'used_at'
};

exports.Prisma.FarmerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  village: 'village',
  commissioner_id: 'commissioner_id',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BuyerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  commissioner_id: 'commissioner_id',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category_id: 'category_id',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AuctionSessionScalarFieldEnum = {
  id: 'id',
  date: 'date',
  commissioner_id: 'commissioner_id',
  status: 'status',
  payment_status: 'payment_status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AuctionItemScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  farmer_id: 'farmer_id',
  product_id: 'product_id',
  unit: 'unit',
  quantity: 'quantity',
  buyer_id: 'buyer_id',
  bill_id: 'bill_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  rate: 'rate'
};

exports.Prisma.BillScalarFieldEnum = {
  id: 'id',
  bill_number: 'bill_number',
  farmer_id: 'farmer_id',
  commissioner_id: 'commissioner_id',
  product_id: 'product_id',
  session_id: 'session_id',
  total_quantity: 'total_quantity',
  gross_amount: 'gross_amount',
  commission_rate: 'commission_rate',
  commission_amount: 'commission_amount',
  other_charges: 'other_charges',
  net_payable: 'net_payable',
  payment_status: 'payment_status',
  payment_method: 'payment_method',
  payment_date: 'payment_date',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.SessionStatus = exports.$Enums.SessionStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED'
};

exports.SessionPaymentStatus = exports.$Enums.SessionPaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED'
};

exports.Unit = exports.$Enums.Unit = {
  KG: 'KG',
  GRAM: 'GRAM',
  QUINTAL: 'QUINTAL',
  TON: 'TON',
  BUNDLE: 'BUNDLE',
  PIECE: 'PIECE',
  LITRE: 'LITRE',
  MILLILITRE: 'MILLILITRE',
  GALLON: 'GALLON',
  DOZEN: 'DOZEN',
  BOX: 'BOX',
  BAG: 'BAG',
  OTHER: 'OTHER'
};

exports.BillPaymentStatus = exports.$Enums.BillPaymentStatus = {
  UNPAID: 'UNPAID',
  PAID: 'PAID'
};

exports.Prisma.ModelName = {
  Commissioner: 'Commissioner',
  PasswordReset: 'PasswordReset',
  Farmer: 'Farmer',
  Buyer: 'Buyer',
  Category: 'Category',
  Product: 'Product',
  AuctionSession: 'AuctionSession',
  AuctionItem: 'AuctionItem',
  Bill: 'Bill'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
